{"version":3,"sources":["app/components/AutocompleteVirtualization.js","app/modules/pages/sft/webPages/sftAside/component/SFTCustomerAutocomplete.js","app/modules/pages/sft/webPages/sftAside/component/SFTQuantitySearch.js","app/modules/pages/sft/webPages/sftAside/component/SFTUnitAutocomplete.js","app/modules/pages/sft/webPages/sftAside/component/SFTUserNameAutocomplete.js","app/modules/pages/sft/webPages/sftAside/component/SFTOrderIdSearch.js","app/modules/pages/sft/webPages/sftAside/component/SFTItemNameAutocomplete.js","app/modules/pages/sft/webPages/sftAside/component/SFTDisplayModeSelect.js","app/modules/pages/sft/webPages/sftAside/SFTAside.js","app/modules/pages/sft/webPages/sftMakeOrderList/component/MakeOrderCard.js","app/modules/pages/sft/webPages/sftMakeOrderList/component/MakeOrderCardSkeletion.js","app/modules/pages/sft/webPages/sftMakeOrderList/SFTMakeOrderList.js","app/modules/pages/sft/webPages/SFTCard.js","app/modules/pages/sft/mobilePages/sftAside/component/SFTCustomerAutocomplete.js","app/modules/pages/sft/mobilePages/sftAside/component/SFTQuantitySearch.js","app/modules/pages/sft/mobilePages/sftAside/component/SFTUnitAutocomplete.js","app/modules/pages/sft/mobilePages/sftAside/component/SFTUserNameAutocomplete.js","app/modules/pages/sft/mobilePages/sftAside/component/SFTItemNameAutocomplete.js","app/modules/pages/sft/mobilePages/sftAside/component/SFTOrderIdSearch.js","app/modules/pages/sft/mobilePages/sftAside/component/SFTDisplayModeSelect.js","app/modules/pages/sft/mobilePages/sftAside/component/SFTSearchModeSelect.js","app/modules/pages/sft/mobilePages/sftAside/component/SFTShowResultButton.js","app/modules/pages/sft/mobilePages/sftAside/SFTAside.js","app/modules/pages/sft/mobilePages/sftMakeOrderList/component/MakeOrderCard.js","app/modules/pages/sft/mobilePages/sftMakeOrderList/component/MakeOrderCardSkeletion.js","app/modules/pages/sft/mobilePages/sftMakeOrderList/SFTMakeOrderList.js","app/modules/pages/sft/mobilePages/SFTMobileCard.js","app/modules/pages/sft/mobilePages/sftFilteredResultDialog/SFTFilteredResultDialog.js","app/modules/pages/sft/SFTPage.js"],"names":["renderRow","props","data","index","style","dataSet","inlineStyle","top","hasOwnProperty","ListSubheader","component","group","key","Typography","noWrap","OuterElementContext","createContext","OuterElementType","forwardRef","ref","outerProps","useContext","ListboxComponent","children","other","itemData","forEach","item","push","theme","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","length","itemSize","getChildSize","child","gridRef","useRef","useEffect","current","resetAfterIndex","useResetCache","Provider","value","height","map","reduce","a","b","width","outerElementType","innerElementType","overscanCount","StyledPopper","styled","Popper","autocompleteClasses","listbox","boxSizing","padding","margin","AutocompleteVirtualization","loading","id","label","options","setValue","setOpen","transitions","Grow","in","timeout","Autocomplete","multiple","disableListWrap","PopperComponent","groupBy","option","toUpperCase","renderInput","params","TextField","variant","placeholder","undefined","renderOption","renderGroup","onChange","e","onOpen","onClose","SFTCustomerAutocomplete","timeoutId","clearTimeout","setTimeout","SFTQuantitySearch","type","disabled","target","parseInt","SFTUnitAutocomplete","SFTUserNameAutocomplete","SFTOrderIdSearch","SFTItemNameAutocomplete","SFTDisplayModeSelect","FormControl","fullWidth","InputLabel","Select","labelId","defaultValue","MenuItem","SFTAside","customerOptions","unitOptions","userNameOptions","itemNameOptions","setCustomerFilter","setQuantityFilter","setUnitFilter","setUserNameFilter","setItemNameFilter","setOrderIdFilter","displayMode","setDisplayMode","Box","textAlign","Grid","container","justifyContent","alignItems","xs","fontSize","marginTop","Stack","spacing","useStyles","makeStyles","paddingTop","borderRadius","contentText","marginBottom","getDisplayStatus","status","MakeOrderCard","color","datum","classes","displayDatum","customer","proccesseName","quantity","unit","name","userName","itemName","orderId","getDisplayDatum","Card","className","raised","CardContent","Object","values","MakeOrderCardSkeletion","Skeleton","animation","SFTMakeOrderList","max","skeletonDataAmount","Math","floor","random","displayData","slice","Array","SFTCard","useState","customerFilter","quantityFilter","unitFilter","userNameFilter","itemNameFilter","orderIdFilter","dispatch","useDispatch","useSelector","state","SFTData","sft","filteredData","classifiedData","actionsLoading","shallowEqual","actions","setInterval","rawData","direction","setFocus","onFocus","onBlur","SFTSearchModeSelect","SFTShowResultButton","disable","handleClick","Button","size","startIcon","onClick","searchMode","setSearchMode","disableResultButton","showResult","setCarouselTouch","handleOpen","minHeight","SFTMobileCard","carouselTouch","sliderRef","goToAside","slickGoTo","settings","dots","infinite","adaptiveHeight","arrows","touchMove","speed","slidesToShow","slidesToScroll","sx","px","getColorByProccesseNameAndStatus","isPunchType","search","ifStatusOfCheckOut","ifStatusOfCheckIn","getDisplayProccesseByProccesseNameAndStatus","SFTFilteredResultDialog","open","descriptionElementRef","handleClose","descriptionElement","focus","displayDataTemp","Dialog","scroll","DialogTitle","DialogContent","dividers","DialogContentText","tabIndex","displayProccesse","DialogActions","SFTPage","useWindowDimensions","Helmet"],"mappings":"8UAuBA,SAASA,EAAUC,GACjB,IAAQC,EAAuBD,EAAvBC,KAAMC,EAAiBF,EAAjBE,MAAOC,EAAUH,EAAVG,MACfC,EAAUH,EAAKC,GACfG,EAAW,2BACZF,GADY,IAEfG,IAAKH,EAAMG,IAPS,IAUtB,OAAIF,EAAQG,eAAe,SAEvB,cAACC,EAAA,EAAD,CAAiCC,UAAU,MAAMN,MAAOE,EAAxD,SACGD,EAAQM,OADSN,EAAQO,KAO9B,cAACC,EAAA,EAAD,yBAAYH,UAAU,MAASL,EAAQ,IAAvC,IAA2CS,QAAM,EAACV,MAAOE,EAAzD,SACGD,EAAQ,MAKf,IAAMU,EAAsBC,wBAAc,IAEpCC,EAAmBC,sBAAW,SAACjB,EAAOkB,GAC1C,IAAMC,EAAaC,qBAAWN,GAC9B,OAAO,6CAAKI,IAAKA,GAASlB,GAAWmB,OAcvC,IAAME,EAAmBJ,sBAAW,SAA0BjB,EAAOkB,GACnE,IAAQI,EAAuBtB,EAAvBsB,SAAaC,EAArB,YAA+BvB,EAA/B,GACMwB,EAAW,GACjBF,EAASG,SAAQ,SAACC,GAChBF,EAASG,KAAKD,GACdF,EAASG,KAAT,MAAAH,EAAQ,YAAUE,EAAKJ,UAAY,QAGrC,IAAMM,EAAQC,cACRC,EAAOC,YAAcH,EAAMI,YAAYC,GAAG,MAAO,CACrDC,OAAO,IAGHC,EAAYX,EAASY,OACrBC,EAAWP,EAAO,GAAK,GAEvBQ,EAAe,SAACC,GACpB,OAAIA,EAAMhC,eAAe,SAChB,GAGF8B,GAUHG,EA1CR,SAAuBvC,GACrB,IAAMiB,EAAMuB,iBAAO,MAMnB,OALAC,qBAAU,WACW,MAAfxB,EAAIyB,SACNzB,EAAIyB,QAAQC,gBAAgB,GAAG,KAEhC,CAAC3C,IACGiB,EAmCS2B,CAAcV,GAE9B,OACE,qBAAKjB,IAAKA,EAAV,SACE,cAACJ,EAAoBgC,SAArB,CAA8BC,MAAOxB,EAArC,SACE,cAAC,IAAD,CACEC,SAAUA,EACVwB,QAbFb,EAAY,EACP,EAAIE,EAENb,EAASyB,IAAIX,GAAcY,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,IAU9B,GACtBC,MAAM,OACNnC,IAAKsB,EACLc,iBAAkBtC,EAClBuC,iBAAiB,KACjBlB,SAAU,SAACnC,GAAD,OAAWoC,EAAad,EAAStB,KAC3CsD,cAAe,EACfrB,UAAWA,EATb,SAWGpC,WAWL0D,EAAeC,YAAOC,IAAPD,CAAA,4BACZE,IAAoBC,SAAY,CACrCC,UAAW,aACX,OAAQ,CACNC,QAAS,EACTC,OAAQ,MAKP,SAASC,EAAT,GAQH,IAPFC,EAOC,EAPDA,QACAC,EAMC,EANDA,GACAC,EAKC,EALDA,MACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,SACAC,EAEC,EAFDA,QACAC,EACC,EADDA,YAEA,OACE,mCACGA,EACC,cAACC,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,cAACC,EAAA,EAAD,CACET,GAAIA,EACJU,UAAQ,EACRC,iBAAe,EACfC,gBAAiBtB,EACjBpC,iBAAkBA,EAClBgD,QAASA,EACTH,QAASA,EACTc,QAAS,SAACC,GAAD,OAAYA,EAAO,GAAGC,eAC/BC,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BACMD,GADN,IAEEE,QAAQ,SACRlB,MAAOA,EACPmB,YACElB,GAAWA,EAAQjC,OAAS,EACxBiC,EAAQ,GAAK,SAAMA,EAAQ,GAAK,cAChCmB,MAIVC,aAAc,SAACzF,EAAOiF,GAAR,MAAmB,CAACjF,EAAOiF,IACzCS,YAAa,SAACN,GAAD,OAAYA,GACzBO,SAAU,SAACC,EAAG7C,GACRuB,GACFA,EAASvB,IAGb8C,OAAQ,SAACD,GACHrB,GACFA,GAAQ,IAGZuB,QAAS,WACHvB,GACFA,GAAQ,QAMhB,cAACK,EAAA,EAAD,CACET,GAAIA,EACJU,UAAQ,EACRC,iBAAe,EACfC,gBAAiBtB,EACjBpC,iBAAkBA,EAClBgD,QAASA,EACTH,QAASA,EACTc,QAAS,SAACC,GAAD,OAAYA,EAAO,GAAGC,eAC/BC,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BACMD,GADN,IAEEE,QAAQ,SACRlB,MAAOA,EACPmB,YACElB,GAAWA,EAAQjC,OAAS,EACxBiC,EAAQ,GAAK,SAAMA,EAAQ,GAAK,cAChCmB,MAIVC,aAAc,SAACzF,EAAOiF,GAAR,MAAmB,CAACjF,EAAOiF,IACzCS,YAAa,SAACN,GAAD,OAAYA,GACzBO,SAAU,SAACC,EAAG7C,GACZuB,EAASvB,IAEX8C,OAAQ,SAACD,GACPrB,GAAQ,IAEVuB,QAAS,WACPvB,GAAQ,QCpNb,SAASwB,EAAT,GAAkE,IACnEC,EADoC9B,EAA8B,EAA9BA,QAASG,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAY1D,OACE,mCACE,cAACL,EAAD,CACEE,GAAG,WACHD,QAASA,EACTE,MAAM,2BACNC,QAASA,EACTC,SAjBe,SAACvB,GAChBiD,GACFC,aAAaD,GAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,MAWCyB,aAAa,MCnBd,SAAS2B,EAAT,GAAmD,IACpDH,EAD8B9B,EAAqB,EAArBA,QAASI,EAAY,EAAZA,SAY3C,OACE,mCACE,cAACG,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,cAACU,EAAA,EAAD,CACEe,KAAK,SACLjC,GAAG,WACHC,MAAM,eACNkB,QAAQ,SACRe,SAAUnC,EACVyB,SAAU,SAACC,GAAD,OAnBI7C,EAmBgB6C,EAAEU,OAAOvD,MAlBzCiD,GACFC,aAAaD,QAGfA,EAAYE,YAAW,WACrB5B,EAASiC,SAASxD,MACjB,MAPgB,IAACA,SCHjB,SAASyD,EAAT,GAA8D,IAC/DR,EADgC9B,EAA8B,EAA9BA,QAASG,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAYtD,OACE,mCACE,cAACL,EAAD,CACEE,GAAG,OACHD,QAASA,EACTE,MAAM,eACNC,QAASA,EACTC,SAjBe,SAACvB,GAChBiD,GACFC,aAAaD,GAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,MAWCyB,aAAa,MCpBd,SAASiC,EAAT,GAAkE,IACnET,EADoC9B,EAA8B,EAA9BA,QAASG,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAY1D,OACE,mCACE,cAACL,EAAD,CACEE,GAAG,WACHD,QAASA,EACTE,MAAM,2BACNC,QAASA,EACTC,SAjBe,SAACvB,GAChBiD,GACFC,aAAaD,GAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,MAWCyB,aAAa,MCnBd,SAASkC,EAAT,GAAkD,IACnDV,EAD6B9B,EAAqB,EAArBA,QAASI,EAAY,EAAZA,SAY1C,OACE,mCACE,cAACG,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,cAACU,EAAA,EAAD,CACElB,GAAG,UACHC,MAAM,2BACNkB,QAAQ,SACRe,SAAUnC,EACVyB,SAAU,SAACC,GAAD,OAlBI7C,EAkBgB6C,EAAEU,OAAOvD,MAjBzCiD,GACFC,aAAaD,QAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,MAPgB,IAACA,SCHjB,SAAS4D,EAAT,GAAkE,IACnEX,EADoC9B,EAA8B,EAA9BA,QAASG,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAY1D,OACE,mCACE,cAACL,EAAD,CACEE,GAAG,WACHD,QAASA,EACTE,MAAM,eACNC,QAASA,EACTC,SAjBe,SAACvB,GAChBiD,GACFC,aAAaD,GAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,MAWCyB,aAAa,M,wCChBd,SAASoC,EAAT,GAA6C,IAC9CZ,EADiC1B,EAAY,EAAZA,SAYrC,OACE,mCACE,cAACG,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,eAACkC,EAAA,EAAD,CAAaC,WAAS,EAACxB,QAAQ,SAA/B,UACE,cAACyB,EAAA,EAAD,CAAY5C,GAAG,mBAAf,sCACA,eAAC6C,EAAA,EAAD,CACEC,QAAQ,mBACR9C,GAAG,cACH+C,aAAc,UACd9C,MAAM,2BACNuB,SAAU,SAACC,GApBA,IAAC7C,IAqBG6C,EAAEU,OAAOvD,MApB5BiD,GACFC,aAAaD,GAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,IAQG,UASE,cAACoE,EAAA,EAAD,CAAUpE,MAAO,UAAjB,0BACA,cAACoE,EAAA,EAAD,CAAUpE,MAAO,SAAjB,gCACA,cAACoE,EAAA,EAAD,CAAUpE,MAAO,cAAjB,4CACA,cAACoE,EAAA,EAAD,CAAUpE,MAAO,SAAjB,gD,+BCvBL,SAASqE,EAAT,GAcH,IAbFlD,EAaC,EAbDA,QACAmD,EAYC,EAZDA,gBACAC,EAWC,EAXDA,YACAC,EAUC,EAVDA,gBACAC,EASC,EATDA,gBACAC,EAQC,EARDA,kBACAC,EAOC,EAPDA,kBACAC,EAMC,EANDA,cACAC,EAKC,EALDA,kBACAC,EAIC,EAJDA,kBACAC,EAGC,EAHDA,iBACAC,EAEC,EAFDA,YACAC,EACC,EADDA,eAEA,OACE,qCACE,cAACC,EAAA,EAAD,CAAK9H,MAAO,CAAE+H,UAAW,UAAzB,SACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAe,SAASC,WAAW,SAAnD,UACE,cAACH,EAAA,EAAD,CAAMzG,MAAI,EAAC6G,GAAI,GAAf,SACE,uBAAOpI,MAAO,CAAEqI,SAAU,IAA1B,4BAEF,cAACL,EAAA,EAAD,CAAMzG,MAAI,EAAC6G,GAAI,GAAf,SACE,uBAAOpI,MAAO,CAAEqI,SAAU,IAA1B,yBAIN,cAACP,EAAA,EAAD,CAAK9H,MAAO,CAAEsI,UAAW,IAAzB,SACE,eAACC,EAAA,EAAD,CAAOC,QAAS,EAAhB,UACE,cAAC/B,EAAD,CAAsB7D,MAAOgF,EAAazD,SAAU0D,IACpD,cAACjC,EAAD,CACE7B,QAASA,EACTG,QAASgD,EACT/C,SAAUmD,IAEZ,cAACtB,EAAD,CAAmBjC,QAASA,EAASI,SAAUoD,IAC/C,cAAClB,EAAD,CACEtC,QAASA,EACTG,QAASiD,EACThD,SAAUqD,IAEZ,cAAClB,EAAD,CACEvC,QAASA,EACTG,QAASkD,EACTjD,SAAUsD,IAEZ,cAACjB,EAAD,CACEzC,QAASA,EACTG,QAASmD,EACTlD,SAAUuD,IAEZ,cAACnB,EAAD,CAAkBxC,QAASA,EAASI,SAAUwD,Y,+BCxDlDc,EAAYC,YAAW,CAC3BT,UAAW,CACTU,WAAY,GACZC,aAAc,IAEhBC,YAAa,CACXR,SAAU,GACVS,aAAc,MAIlB,SAASC,EAAiBC,GACxB,OAAQA,GACN,IAAK,UAEL,IAAK,UACH,MAAO,qBACT,IAAK,WACH,MAAO,qBACT,IAAK,cACH,MAAO,iCACT,IAAK,SACH,MAAO,eACT,QACE,OAAOA,GAsCN,SAASC,EAAT,GAAmD,IAA1BC,EAAyB,EAAzBA,MAAO/D,EAAkB,EAAlBA,QAASgE,EAAS,EAATA,MACxCC,EAAUX,IAEZY,EArCN,SAAyBlE,EAASgE,GAChC,OAAQhE,GACN,IAAK,WACH,GAAIgE,EACF,MAAO,CACLG,SAAUH,EAAMG,SAChBC,cAAeJ,EAAMI,cACrBC,SAAUL,EAAMM,KACZN,EAAMK,SAAW,IAAML,EAAMM,KAC7BN,EAAMK,SACVR,OAAQD,EAAiBI,EAAMH,QAC/BU,KAAMP,EAAMQ,SACZC,SAAUT,EAAMS,SAChBC,QAASV,EAAMU,SAGnB,MACF,QACE,GAAIV,EACF,MAAO,CACLG,SAAUH,EAAMG,SAChBE,SAAUL,EAAMM,KACZN,EAAMK,SAAW,IAAML,EAAMM,KAC7BN,EAAMK,SACVR,OAAQD,EAAiBI,EAAMH,QAC/BU,KAAMP,EAAMQ,SACZC,SAAUT,EAAMS,SAChBC,QAASV,EAAMU,UAUJC,CAAgB3E,EAASgE,GAE5C,OACE,cAAC7E,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,cAACuF,EAAA,EAAD,CAAMC,UAAWZ,EAAQnB,UAAWgC,QAAQ,EAA5C,SACE,cAACC,EAAA,EAAD,UACGb,EACGc,OAAOC,OAAOf,GAAcvG,KAAI,SAACF,EAAO7C,GACtC,GAAI6C,EACF,OACE,cAACnC,EAAA,EAAD,CACEuJ,UAAWZ,EAAQP,YAEnB7I,MAAO,CAAEkJ,MAAOA,GAHlB,SAKGtG,GAHI7C,MAQb,W,aCrFR0I,EAAYC,YAAW,CAC3BT,UAAW,CACTU,WAAY,GACZC,aAAc,IAEhBC,YAAa,CACXR,SAAU,GACVS,aAAc,MAIX,SAASuB,EAAT,GAA8C,IAAZlF,EAAW,EAAXA,QACjCiE,EAAUX,IAEhB,OACE,cAACnE,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,cAACuF,EAAA,EAAD,CAAMC,UAAWZ,EAAQnB,UAAWgC,QAAQ,EAA5C,SACE,cAACC,EAAA,EAAD,UACe,aAAZ/E,EACC,qCACE,cAAC1E,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,WAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,eAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,UACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,SACjC,cAACoH,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,WAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,aAIrC,qCACE,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,WAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,eAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,UACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,SACjC,cAACoH,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,WAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,mBCvD1C,SAASsH,GAAT,GAA+C,IARhCC,EAQatB,EAAkB,EAAlBA,MAAOpF,EAAW,EAAXA,QACpC2G,GATgBD,EASkB,GAR/BE,KAAKC,MAAMD,KAAKE,SAAWJ,GAQU,GACxCK,EAA6B3B,EAAMrJ,KAL3BiL,MAAM,EAAG,KAOrB,OACE,qCACE,cAACjD,EAAA,EAAD,CAAK9H,MAAO,CAAE+H,UAAW,UAAzB,SACE,eAACQ,EAAA,EAAD,CAAOC,QAAS,EAAhB,UACE,uBAAOxI,MAAO,CAAEqI,SAAU,IAA1B,SAAiCc,EAAMI,gBACvC,uBAAOvJ,MAAO,CAAEqI,SAAU,IAA1B,SAAiCc,EAAMrJ,KAAKmC,cAGhD,cAAC6F,EAAA,EAAD,CAAK9H,MAAO,CAAEsI,UAAW,IAAzB,SACE,cAACC,EAAA,EAAD,CAAOC,QAAS,EAAhB,SACIzE,EAeE,YAAIiH,MAAMN,IAAqB5H,KAAI,SAACF,EAAO7C,GACzC,OACE,cAACsK,EAAD,CAEElF,QAC0B,iBAAxBgE,EAAMI,cAAyB,gBAAalE,GAFzCtF,MAjBX+K,EAAY7I,OAAS,EACnB6I,EAAYhI,KAAI,SAACF,EAAO7C,GACtB,OACE,cAACkJ,EAAD,CAEEC,MAAOC,EAAMD,MACbC,MAAOvG,EACPuC,QAC0B,iBAAxBgE,EAAMI,cAAyB,gBAAalE,GAJzCtF,MASX,YCjCT,SAASkL,KACd,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuB7D,EAAvB,KACA,EAA4C4D,wBAAS7F,GAArD,mBAAO+F,EAAP,KAAuB7D,EAAvB,KACA,EAAoC2D,mBAAS,IAA7C,mBAAOG,EAAP,KAAmB7D,EAAnB,KACA,EAA4C0D,mBAAS,IAArD,mBAAOI,EAAP,KAAuB7D,EAAvB,KACA,EAA4CyD,mBAAS,IAArD,mBAAOK,EAAP,KAAuB7D,EAAvB,KACA,EAA0CwD,wBAAS7F,GAAnD,mBAAOmG,EAAP,KAAsB7D,EAAtB,KACA,EAAsCuD,mBAAS,WAA/C,mBAAOtD,EAAP,KAAoBC,EAApB,KAEM4D,EAAWC,cAEjB,EASIC,aACF,SAACC,GAAD,MAAY,CACVC,QAASD,EAAME,IAAID,QACnB3E,gBAAiB0E,EAAME,IAAI5E,gBAC3BC,YAAayE,EAAME,IAAI3E,YACvBC,gBAAiBwE,EAAME,IAAI1E,gBAC3BC,gBAAiBuE,EAAME,IAAIzE,gBAC3B0E,aAAcH,EAAME,IAAIC,aACxBC,eAAgBJ,EAAME,IAAIE,eAC1BC,eAAgBL,EAAME,IAAIG,kBAE5BC,KAnBAL,EADF,EACEA,QACA3E,EAFF,EAEEA,gBACAC,EAHF,EAGEA,YACAC,EAJF,EAIEA,gBACAC,EALF,EAKEA,gBACA0E,EANF,EAMEA,aACAC,EAPF,EAOEA,eACAC,EARF,EAQEA,eAgFF,OAjEA1J,qBAAU,WACJsJ,EAAQ5J,QACVwJ,EAASU,OAGXC,aAAY,WACVX,EAASU,SACR,OACF,IAEH5J,qBAAU,WACJwJ,EAAa9J,OAAS,GACxBwJ,EACEU,IAA0B,CACxBJ,aAAcA,EACdnE,YAAaA,OAIlB,CAACmE,EAAcnE,IAElBrF,qBAAU,WACJsJ,EAAQ5J,OAAS,IACnBwJ,EACEU,IAAwB,CACtBE,QAASR,EACTvC,SAAU6B,EACV3B,SAAU4B,EACV3B,KAAM4B,EACN1B,SAAU2B,EACVzB,QAAS2B,KAGbC,EAASU,IAA2B,CAAEE,QAASR,KAC/CJ,EAASU,IAAuB,CAAEE,QAASR,KAC3CJ,EAASU,IAA2B,CAAEE,QAASR,KAC/CJ,EAASU,IAA2B,CAAEE,QAASR,QAEhD,CAACA,IAEJtJ,qBAAU,WACJsJ,EAAQ5J,OAAS,GACnBwJ,EACEU,IAAwB,CACtBE,QAASR,EACTjE,YAAaA,EACb0B,SAAU6B,EACV3B,SAAU4B,EACV3B,KAAM4B,EACN1B,SAAU2B,EACV1B,SAAU2B,EACV1B,QAAS2B,OAId,CACD5D,EACAuD,EACAC,EACAC,EACAC,EACAE,EACAD,IAIA,mCACE,eAACvD,EAAA,EAAD,CACEC,WAAS,EACTqE,UAAU,MACVpE,eAAe,SACfC,WAAW,aACXK,QAAS,EALX,UAOE,cAACR,EAAA,EAAD,CAAMzG,MAAI,EAAC6G,GAAI,EAAf,SACE,cAACnB,EAAD,CACElD,QAASkI,EACT/E,gBAAiBA,EACjBC,YAAaA,EACbC,gBAAiBA,EACjBC,gBAAiBA,EACjBC,kBAAmBA,EACnBC,kBAAmBA,EACnBC,cAAeA,EACfC,kBAAmBA,EACnBC,kBAAmBA,EACnBC,iBAAkBA,EAClBC,YAAaA,EACbC,eAAgBA,MAGnBmE,EAAe/J,OAAS,EACrB+J,EAAelJ,KAAI,SAACqG,EAAOpJ,GACzB,OACE,cAACiI,EAAA,EAAD,CAAMzG,MAAI,EAAC6G,IAAE,EAAb,SACE,cAACoC,GAAD,CAAkBrB,MAAOA,EAAOpF,QAASkI,KADxBlM,MAKvB,UC5IL,SAAS6F,GAAT,GAKH,IACEC,EALJ9B,EAIC,EAJDA,QACAG,EAGC,EAHDA,QACAC,EAEC,EAFDA,SACAC,EACC,EADDA,QAiBA,OACE,mCACE,cAACN,EAAD,CACEE,GAAG,WACHD,QAASA,EACTE,MAAM,2BACNC,QAASA,EACTC,SArBe,SAACvB,GAChBiD,GACFC,aAAaD,GAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,MAeCwB,QAZa,SAACxB,GAClBwB,EAAQxB,IAYJyB,aAAa,MC7Bd,SAAS2B,GAAT,GAA6D,IAC9DH,EAD8B9B,EAA+B,EAA/BA,QAASI,EAAsB,EAAtBA,SAAUoI,EAAY,EAAZA,SAYrD,OACE,mCACE,cAACjI,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,cAACU,EAAA,EAAD,CACEe,KAAK,SACLjC,GAAG,WACHC,MAAM,eACNkB,QAAQ,SACRe,SAAUnC,EACVyB,SAAU,SAACC,GAAD,OAnBI7C,EAmBgB6C,EAAEU,OAAOvD,MAlBzCiD,GACFC,aAAaD,QAGfA,EAAYE,YAAW,WACrB5B,EAASiC,SAASxD,MACjB,MAPgB,IAACA,GAoBd4J,QAAS,WACHD,GACFA,GAAS,IAGbE,OAAQ,WACFF,GACFA,GAAS,UC9BhB,SAASlG,GAAT,GAAsE,IACvER,EADgC9B,EAAsC,EAAtCA,QAASG,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,SAASC,EAAW,EAAXA,QAgB/D,OACE,mCACE,cAACN,EAAD,CACEE,GAAG,OACHD,QAASA,EACTE,MAAM,eACNC,QAASA,EACTC,SArBe,SAACvB,GAChBiD,GACFC,aAAaD,GAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,MAeCwB,QAZa,SAACxB,GAClBwB,EAAQxB,IAYJyB,aAAa,MCzBd,SAASiC,GAAT,GAKH,IACET,EALJ9B,EAIC,EAJDA,QACAG,EAGC,EAHDA,QACAC,EAEC,EAFDA,SACAC,EACC,EADDA,QAiBA,OACE,mCACE,cAACN,EAAD,CACEE,GAAG,WACHD,QAASA,EACTE,MAAM,2BACNC,QAASA,EACTC,SArBe,SAACvB,GAChBiD,GACFC,aAAaD,GAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,MAeCwB,QAZa,SAACxB,GAClBwB,EAAQxB,IAYJyB,aAAa,MC9Bd,SAASmC,GAAT,GAKH,IACEX,EALJ9B,EAIC,EAJDA,QACAG,EAGC,EAHDA,QACAC,EAEC,EAFDA,SACAC,EACC,EADDA,QAiBA,OACE,mCACE,cAACN,EAAD,CACEE,GAAG,WACHD,QAASA,EACTE,MAAM,eACNC,QAASA,EACTC,SArBe,SAACvB,GAChBiD,GACFC,aAAaD,GAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,MAeCwB,QAZa,SAACxB,GAClBwB,EAAQxB,IAYJyB,aAAa,MC7Bd,SAASkC,GAAT,GAA4D,IAC7DV,EAD6B9B,EAA+B,EAA/BA,QAASI,EAAsB,EAAtBA,SAAUoI,EAAY,EAAZA,SAYpD,OACE,mCACE,cAACjI,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,cAACU,EAAA,EAAD,CACElB,GAAG,UACHC,MAAM,2BACNkB,QAAQ,SACRe,SAAUnC,EACVyB,SAAU,SAACC,GAAD,OAlBI7C,EAkBgB6C,EAAEU,OAAOvD,MAjBzCiD,GACFC,aAAaD,QAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,MAPgB,IAACA,GAmBd4J,QAAS,WACHD,GACFA,GAAS,IAGbE,OAAQ,WACFF,GACFA,GAAS,UCzBhB,SAAS9F,GAAT,GAAsD,IACvDZ,EADiC1B,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAY/C,OACE,mCACE,cAACE,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,eAACkC,EAAA,EAAD,CAAaC,WAAS,EAACxB,QAAQ,SAA/B,UACE,cAACyB,EAAA,EAAD,CAAY5C,GAAG,mBAAf,sCACA,eAAC6C,EAAA,EAAD,CACEC,QAAQ,mBACR9C,GAAG,cACH+C,aAAc,UACd9C,MAAM,2BACNuB,SAAU,SAACC,GApBA,IAAC7C,EAqBNuB,IArBMvB,EAsBK6C,EAAEU,OAAOvD,MArB9BiD,GACFC,aAAaD,GAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,KAkBK8C,OAAQ,SAACD,GACHrB,GACFA,GAAQ,IAGZuB,QAAS,SAACF,GACJrB,GACFA,GAAQ,IAjBd,UAqBE,cAAC4C,EAAA,EAAD,CAAUpE,MAAO,UAAjB,0BACA,cAACoE,EAAA,EAAD,CAAUpE,MAAO,SAAjB,gCACA,cAACoE,EAAA,EAAD,CAAUpE,MAAO,cAAjB,4CACA,cAACoE,EAAA,EAAD,CAAUpE,MAAO,SAAjB,gDCzCL,SAAS8J,GAAT,GAAqD,IACtD7G,EADgC1B,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAY9C,OACE,mCACE,cAACE,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,eAACkC,EAAA,EAAD,CAAaC,WAAS,EAACxB,QAAQ,SAA/B,UACE,cAACyB,EAAA,EAAD,CAAY5C,GAAG,kBAAf,sCACA,eAAC6C,EAAA,EAAD,CACEC,QAAQ,kBACR9C,GAAG,aACH+C,aAAc,aACd9C,MAAM,2BACNuB,SAAU,SAACC,GApBA,IAAC7C,EAqBNuB,IArBMvB,EAsBK6C,EAAEU,OAAOvD,MArB9BiD,GACFC,aAAaD,GAGfA,EAAYE,YAAW,WACrB5B,EAASvB,KACR,KAkBK8C,OAAQ,SAACD,GACHrB,GACFA,GAAQ,IAGZuB,QAAS,SAACF,GACJrB,GACFA,GAAQ,IAjBd,UAqBE,cAAC4C,EAAA,EAAD,CAAUpE,MAAO,aAAjB,gCACA,cAACoE,EAAA,EAAD,CAAUpE,MAAO,WAAjB,oC,mCCzCL,SAAS+J,GAAT,GAAwD,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,YAC7C,OACE,cAACvI,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,cAACsI,GAAA,EAAD,CACE3H,QAAQ,YACR4H,KAAK,QACLC,UAAW,cAAC,KAAD,IACX9G,SAAU0G,EACVK,QAAS,WACPJ,KANJ,wCCOC,SAAS5F,GAAT,GAmBH,IAlBFlD,EAkBC,EAlBDA,QACAmD,EAiBC,EAjBDA,gBACAC,EAgBC,EAhBDA,YACAC,EAeC,EAfDA,gBACAC,EAcC,EAdDA,gBACAC,EAaC,EAbDA,kBACAC,EAYC,EAZDA,kBACAC,EAWC,EAXDA,cACAC,EAUC,EAVDA,kBACAC,EASC,EATDA,kBACAC,EAQC,EARDA,iBACAC,EAOC,EAPDA,YACAC,EAMC,EANDA,eACAqF,EAKC,EALDA,WACAC,EAIC,EAJDA,cACAC,EAGC,EAHDA,oBACAC,EAEC,EAFDA,WACAC,EACC,EADDA,iBAEMC,EAAa,SAAC3K,GAEhB0K,GADE1K,IAON,OACE,mCACE,eAACkF,EAAA,EAAD,CAAK9H,MAAO,CAAEwN,UAAW,oCAAzB,UACE,cAAC1F,EAAA,EAAD,CACE9H,MAAO,CACL+H,UAAW,UAFf,SAKE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAe,SAASC,WAAW,SAAnD,UACE,cAACH,EAAA,EAAD,CAAMzG,MAAI,EAAC6G,GAAI,GAAf,SACE,uBAAOpI,MAAO,CAAEqI,SAAU,IAA1B,4BAEF,cAACL,EAAA,EAAD,CAAMzG,MAAI,EAAC6G,GAAI,GAAf,SACE,uBAAOpI,MAAO,CAAEqI,SAAU,IAA1B,yBAIN,cAACP,EAAA,EAAD,CAAK9H,MAAO,CAAEsI,UAAW,IAAzB,SACE,eAACC,EAAA,EAAD,CAAOC,QAAS,EAAhB,UACE,cAAC,GAAD,CACE5F,MAAOgF,EACPzD,SAAU0D,EACVzD,QAASmJ,IAEX,cAAC,GAAD,CACExJ,QAASA,EACTG,QAASgD,EACT/C,SAAUmD,EACVlD,QAASmJ,IAEX,cAAC,GAAD,CACExJ,QAASA,EACTI,SAAUoD,EACVgF,SAAUgB,IAEZ,cAAC,GAAD,CACExJ,QAASA,EACTG,QAASiD,EACThD,SAAUqD,EACVpD,QAASmJ,IAEX,cAAC,GAAD,CACExJ,QAASA,EACTG,QAASkD,EACTjD,SAAUsD,EACVrD,QAASmJ,IAEX,cAAC,GAAD,CACExJ,QAASA,EACTG,QAASmD,EACTlD,SAAUuD,EACVtD,QAASmJ,IAEX,cAAC,GAAD,CACExJ,QAASA,EACTI,SAAUwD,EACV4E,SAAUgB,IAEZ,cAACb,GAAD,CACE9J,MAAOsK,EACP/I,SAAUgJ,EACV/I,QAASmJ,IAEX,cAACZ,GAAD,CACEC,QAASQ,EACTP,YAAaQ,cCpG3B,IAAM5E,GAAYC,YAAW,CAC3BT,UAAW,CACTU,WAAY,GACZC,aAAc,IAEhBC,YAAa,CACXR,SAAU,GACVS,aAAc,MAIlB,SAASC,GAAiBC,GACxB,OAAQA,GACN,IAAK,UAEL,IAAK,UACH,MAAO,qBACT,IAAK,WACH,MAAO,qBACT,IAAK,cACH,MAAO,iCACT,IAAK,SACH,MAAO,eACT,QACE,OAAOA,GAsCN,SAASC,GAAT,GAAmD,IAA1BC,EAAyB,EAAzBA,MAAO/D,EAAkB,EAAlBA,QAASgE,EAAS,EAATA,MACxCC,EAAUX,KAEZY,EArCN,SAAyBlE,EAASgE,GAChC,OAAQhE,GACN,IAAK,WACH,GAAIgE,EACF,MAAO,CACLG,SAAUH,EAAMG,SAChBC,cAAeJ,EAAMI,cACrBC,SAAUL,EAAMM,KACZN,EAAMK,SAAW,IAAML,EAAMM,KAC7BN,EAAMK,SACVR,OAAQD,GAAiBI,EAAMH,QAC/BU,KAAMP,EAAMQ,SACZC,SAAUT,EAAMS,SAChBC,QAASV,EAAMU,SAGnB,MACF,QACE,GAAIV,EACF,MAAO,CACLG,SAAUH,EAAMG,SAChBE,SAAUL,EAAMM,KACZN,EAAMK,SAAW,IAAML,EAAMM,KAC7BN,EAAMK,SACVR,OAAQD,GAAiBI,EAAMH,QAC/BU,KAAMP,EAAMQ,SACZC,SAAUT,EAAMS,SAChBC,QAASV,EAAMU,UAUJC,CAAgB3E,EAASgE,GAE5C,OACE,cAAC7E,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,cAACuF,EAAA,EAAD,CAAMC,UAAWZ,EAAQnB,UAAWgC,QAAQ,EAA5C,SACE,cAACC,EAAA,EAAD,UACGb,EACGc,OAAOC,OAAOf,GAAcvG,KAAI,SAACF,EAAO7C,GACtC,GAAI6C,EACF,OACE,cAACnC,EAAA,EAAD,CACEuJ,UAAWZ,EAAQP,YAEnB7I,MAAO,CAAEkJ,MAAOA,GAHlB,SAKGtG,GAHI7C,MAQb,WCrFd,IAAM0I,GAAYC,YAAW,CAC3BT,UAAW,CACTU,WAAY,GACZC,aAAc,IAEhBC,YAAa,CACXR,SAAU,GACVS,aAAc,MAIX,SAASuB,GAAT,GAA8C,IAAZlF,EAAW,EAAXA,QACjCiE,EAAUX,KAEhB,OACE,cAACnE,EAAA,EAAD,CAAMC,IAAI,EAAMC,QAAS,KAAzB,SACE,cAACuF,EAAA,EAAD,CAAMC,UAAWZ,EAAQnB,UAAWgC,QAAQ,EAA5C,SACE,cAACC,EAAA,EAAD,UACe,aAAZ/E,EACC,qCACE,cAAC1E,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,WAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,aAIrC,qCACE,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,WAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,UAEnC,eAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,UACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,SACjC,cAACoH,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,WAEnC,cAACzC,EAAA,EAAD,CAAYuJ,UAAWZ,EAAQP,YAA/B,SACE,cAACyB,EAAA,EAAD,CAAUC,UAAU,OAAOrH,MAAM,mBCnD1C,SAASsH,GAAT,GAA+C,IARhCC,EAQatB,EAAkB,EAAlBA,MAAOpF,EAAW,EAAXA,QACpC2G,GATgBD,EASkB,GAR/BE,KAAKC,MAAMD,KAAKE,SAAWJ,GAQU,GACxCK,EAA6B3B,EAAMrJ,KAL3BiL,MAAM,EAAE,IAOpB,OACE,mCACE,eAACjD,EAAA,EAAD,CAAK9H,MAAO,CAAEwN,UAAW,oCAAzB,UACE,cAAC1F,EAAA,EAAD,CAAK9H,MAAO,CAAE+H,UAAW,UAAzB,SACE,eAACQ,EAAA,EAAD,CAAOC,QAAS,EAAhB,UACE,uBAAOxI,MAAO,CAAEqI,SAAU,IAA1B,SAAiCc,EAAMI,gBACvC,uBAAOvJ,MAAO,CAAEqI,SAAU,IAA1B,SAAiCc,EAAMrJ,KAAKmC,cAGhD,cAAC6F,EAAA,EAAD,CAAK9H,MAAO,CAAEsI,UAAW,IAAzB,SACE,cAACC,EAAA,EAAD,CAAOC,QAAS,EAAhB,SACIzE,EAiBE,YAAIiH,MAAMN,IAAqB5H,KAAI,SAACF,EAAO7C,GACzC,OAAO,cAAC,GAAD,GAA6BA,MAjBtC+K,EAAY7I,OAAS,EACnB6I,EAAYhI,KAAI,SAACF,EAAO7C,GACtB,OACE,cAAC,GAAD,CAEEmJ,MAAOC,EAAMD,MACbC,MAAOvG,EACPuC,QAC0B,iBAAxBgE,EAAMI,cACF,gBACAlE,GANDtF,MAWX,c,uCC/BX,SAAS0N,GAAT,GAAqC,IAAZrJ,EAAW,EAAXA,QAC9B,EAA0C8G,oBAAS,GAAnD,mBAAOwC,EAAP,KAAsBJ,EAAtB,KACA,EAA4CpC,mBAAS,IAArD,mBAAOC,EAAP,KAAuB7D,EAAvB,KACA,EAA4C4D,wBAAS7F,GAArD,mBAAO+F,EAAP,KAAuB7D,EAAvB,KACA,EAAoC2D,mBAAS,IAA7C,mBAAOG,EAAP,KAAmB7D,EAAnB,KACA,EAA4C0D,mBAAS,IAArD,mBAAOI,EAAP,KAAuB7D,EAAvB,KACA,EAA4CyD,mBAAS,IAArD,mBAAOK,EAAP,KAAuB7D,EAAvB,KACA,EAA0CwD,wBAAS7F,GAAnD,mBAAOmG,EAAP,KAAsB7D,EAAtB,KACA,EAAsCuD,mBAAS,WAA/C,mBAAOtD,EAAP,KAAoBC,EAApB,KACA,EAAoCqD,mBAAS,cAA7C,mBAAOgC,EAAP,KAAmBC,EAAnB,KAEMQ,EAAYrL,mBAEZmJ,EAAWC,cAUXkC,EAAY,WACZD,EAAUnL,SACZmL,EAAUnL,QAAQqL,UAAU,IAIhC,EAQIlC,aACF,SAACC,GAAD,MAAY,CACVC,QAASD,EAAME,IAAID,QACnB3E,gBAAiB0E,EAAME,IAAI5E,gBAC3BC,YAAayE,EAAME,IAAI3E,YACvBC,gBAAiBwE,EAAME,IAAI1E,gBAC3BC,gBAAiBuE,EAAME,IAAIzE,gBAC3B2E,eAAgBJ,EAAME,IAAIE,eAC1BC,eAAgBL,EAAME,IAAIG,kBAE5BC,KAjBAL,EADF,EACEA,QACA3E,EAFF,EAEEA,gBACAC,EAHF,EAGEA,YACAC,EAJF,EAIEA,gBACAC,EALF,EAKEA,gBACA2E,GANF,EAMEA,eACAC,GAPF,EAOEA,eAcF1J,qBAAU,WACRkJ,EAASU,OACTC,aAAY,WACVX,EAASU,SACR,OACF,IAEH5J,qBAAU,WACJsJ,EAAQ5J,OAAS,GACnBwJ,EACEU,IAA0B,CACxBJ,aAAcF,EACdjE,YAAaA,OAIlB,CAACiE,EAASjE,IAEbrF,qBAAU,WACJsJ,EAAQ5J,OAAS,IACnBwJ,EAASU,IAA2B,CAAEE,QAASR,KAC/CJ,EAASU,IAAuB,CAAEE,QAASR,KAC3CJ,EAASU,IAA2B,CAAEE,QAASR,QAEhD,CAACA,IAEJtJ,qBAAU,WACJsJ,EAAQ5J,OAAS,GACnBwJ,EACEU,IAAwB,CACtBE,QAASR,EACTjE,YAAaA,EACb0B,SAAU6B,EACV3B,SAAU4B,EACV3B,KAAM4B,EACN1B,SAAU2B,EACV1B,SAAU2B,EACV1B,QAAS2B,EACT0B,WAAYA,OAIjB,CACDtF,EACAuD,EACAC,EACAC,EACAC,EACAC,EACAC,EACA0B,IAGF3K,qBAAU,WACRkJ,EAASU,IAAqByB,MAC7B,CAACD,IAEJ,IAAMG,GAAW,CACfC,MAAM,EACNC,UAAU,EACVC,gBAAgB,EAChBC,QAAQ,EACRC,UAAWT,EACXU,MAAO,IACPC,aAAc,EACdC,eAAgB,GAGlB,OACE,mCACE,eAAC,KAAD,yBAAQvN,IAAK4M,GAAeG,IAA5B,cACE,cAAChG,EAAA,EAAD,CAAayG,GAAI,CAAEC,GAAI,GAAvB,SACE,cAAC,GAAD,CACEzK,QAASkI,GACT/E,gBAAiBA,EACjBC,YAAaA,EACbC,gBAAiBA,EACjBC,gBAAiBA,EACjBC,kBAAmBA,EACnBC,kBAAmBA,EACnBC,cAAeA,EACfC,kBAAmBA,EACnBE,iBAAkBA,EAClBD,kBAAmBA,EACnBE,YAAaA,EACbC,eAAgBA,EAChBqF,WAAYA,EACZC,cAAeA,EACfC,sBAEIjC,EAAelJ,OAAS,GACxBmJ,GACAC,EAAWpJ,OAAS,GACpBqJ,EAAerJ,OAAS,GACxBsJ,EAAetJ,OAAS,GACxBuJ,GAGJ6B,WAjIS,WACjBjJ,GAAQ,IAiIAkJ,iBAAkBA,KA5BZ,GA+BTtB,GAAe/J,OAAS,EACrB+J,GAAelJ,KAAI,SAACqG,EAAOpJ,GACzB,OACE,cAAC+H,EAAA,EAAD,CAAqByG,GAAI,CAAEC,GAAI,GAA/B,SACE,cAAC,GAAD,CAAkBrF,MAAOA,EAAOpF,QAASkI,MADjClM,EAAQ,MAKtB,W,sDClKZ,SAAS0O,GAAT,GAAsD,IAAVtF,EAAS,EAATA,MAC1C,GAAqB,aAAjBA,EAAMH,OACR,OAUF,SAA4BG,GAC1B,IAAIuF,EAAcvF,EAAMS,SAAS+E,OAAO,gBACxC,OAAQxF,EAAMI,eACZ,IAAK,eACH,MAAO,UACT,IAAK,eACH,OAAqB,IAAjBmF,EACK,UAEA,UAEX,IAAK,eAEL,IAAK,eACH,MAAO,UACT,IAAK,MACH,MAAO,UACT,IAAK,MAEL,IAAK,eAEL,IAAK,eAEL,IAAK,eACH,MAAO,UACT,QACE,MAAO,WApCJE,CAAmBzF,GACrB,GACY,YAAjBA,EAAMH,QACW,gBAAjBG,EAAMH,QACW,WAAjBG,EAAMH,QACW,YAAjBG,EAAMH,OAEN,OAiCF,SAA2BG,GACzB,OAAQA,EAAMI,eACZ,IAAK,eACH,MAAO,OACT,IAAK,eAEL,IAAK,eACH,MAAO,UACT,IAAK,MACH,MAAO,UACT,IAAK,MACH,MAAO,UACT,IAAK,eACH,MAAO,UACT,IAAK,eACH,MAAO,UACT,QACE,MAAO,WAlDJsF,CAAkB1F,GAuD7B,SAAS2F,GAAT,GAAiE,IAAV3F,EAAS,EAATA,MACrD,GAAqB,aAAjBA,EAAMH,OACR,OAUF,SAA4BG,GAC1B,IAAIuF,EAAcvF,EAAMS,SAAS+E,OAAO,gBACxC,OAAQxF,EAAMI,eACZ,IAAK,eACH,MAAO,eACT,IAAK,eACH,OAAqB,IAAjBmF,EACK,eAEA,eAEX,IAAK,eAEL,IAAK,eACH,MAAO,KACT,IAAK,MACH,MAAO,eACT,IAAK,MAEL,IAAK,eAEL,IAAK,eAEL,IAAK,eACH,MAAO,eACT,QACE,MAAO,gBApCJE,CAAmBzF,GACrB,GACY,YAAjBA,EAAMH,QACW,gBAAjBG,EAAMH,QACW,WAAjBG,EAAMH,QACW,YAAjBG,EAAMH,OAEN,OAiCF,SAA2BG,GACzB,OAAQA,EAAMI,eACZ,IAAK,eACH,MAAO,eACT,IAAK,eACH,MAAO,eACT,IAAK,eACH,MAAO,eACT,IAAK,MACH,MAAO,KACT,IAAK,MACH,MAAO,eACT,IAAK,eACH,MAAO,eACT,IAAK,eACH,MAAO,eACT,QACE,MAAO,gBAlDJsF,CAAkB1F,GAwDtB,SAAS4F,GAAT,GAAqD,IAAlBC,EAAiB,EAAjBA,KAAM5K,EAAW,EAAXA,QACxC6K,EAAwB3M,iBAAO,MAE/B4M,EAAc,WAClB9K,GAAQ,IAGF2H,EAAiBJ,aACvB,SAACC,GAAD,MAAY,CACVG,aAAcH,EAAME,IAAIC,gBAE1BG,KAJMH,aAORxJ,qBAAU,WACR,GAAIyM,EAAM,CACR,IAAiBG,EAAuBF,EAAhCzM,QACmB,OAAvB2M,GACFA,EAAmBC,WAGtB,CAACJ,IAEJ,IAAIK,EAAkBtD,EAAahB,MAAM,EAAG,IAE5C,OACE,eAACuE,GAAA,EAAD,CACE3I,WAAS,EACTqI,KAAMA,EACNrJ,QAASuJ,EACTK,OAAQ,QACR,kBAAgB,sBAChB,mBAAiB,4BANnB,UAQE,cAACC,GAAA,EAAD,CAAaxL,GAAG,sBAAhB,sCACA,cAACyL,GAAA,EAAD,CAAeC,UAAU,EAAzB,SACE,cAACC,GAAA,EAAD,CACE3L,GAAG,4BACHjD,IAAKkO,EACLW,UAAW,EAHb,SAKE,cAACrH,EAAA,EAAD,CAAOC,QAAS,EAAhB,SACG6G,EAAgBvM,KAAI,SAACqG,GACpB,OACE,cAAC,GAAD,CACED,MAAOuF,GAAiC,CAAEtF,MAAOA,IACjDhE,QAAS,mBACTgE,MAAOA,EACP0G,iBAAkBf,GAChB,CAAE3F,MAAOA,eAQvB,cAAC2G,GAAA,EAAD,UACE,cAAChD,GAAA,EAAD,CAAQG,QAASiC,EAAjB,+B,uBCnMO,SAASa,KACtB,MAAwB7E,oBAAS,GAAjC,mBAAO8D,EAAP,KAAa5K,EAAb,KACA,EAA0B4L,eAAV9M,GAAhB,EAAQL,OAAR,EAAgBK,OAEhB,OACE,qCACE,cAAC+M,GAAA,EAAD,UACE,gGAED/M,EAAQ,IACP,cAAC+H,GAAD,IAEA,qCACE,cAACwC,GAAD,CAAerJ,QAASA,IACxB,cAAC2K,GAAD,CAAyBC,KAAMA,EAAM5K,QAASA","file":"static/js/13.1d573509.chunk.js","sourcesContent":["import React, {\r\n  useEffect,\r\n  useRef,\r\n  createContext,\r\n  useContext,\r\n  forwardRef,\r\n} from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete, {\r\n  autocompleteClasses,\r\n} from \"@material-ui/core/Autocomplete\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport { useTheme, styled } from \"@material-ui/core/styles\";\r\nimport { VariableSizeList } from \"react-window\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nconst LISTBOX_PADDING = 8; // px\r\n\r\nfunction renderRow(props) {\r\n  const { data, index, style } = props;\r\n  const dataSet = data[index];\r\n  const inlineStyle = {\r\n    ...style,\r\n    top: style.top + LISTBOX_PADDING,\r\n  };\r\n\r\n  if (dataSet.hasOwnProperty(\"group\")) {\r\n    return (\r\n      <ListSubheader key={dataSet.key} component=\"div\" style={inlineStyle}>\r\n        {dataSet.group}\r\n      </ListSubheader>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Typography component=\"li\" {...dataSet[0]} noWrap style={inlineStyle}>\r\n      {dataSet[1]}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst OuterElementContext = createContext({});\r\n\r\nconst OuterElementType = forwardRef((props, ref) => {\r\n  const outerProps = useContext(OuterElementContext);\r\n  return <div ref={ref} {...props} {...outerProps} />;\r\n});\r\n\r\nfunction useResetCache(data) {\r\n  const ref = useRef(null);\r\n  useEffect(() => {\r\n    if (ref.current != null) {\r\n      ref.current.resetAfterIndex(0, true);\r\n    }\r\n  }, [data]);\r\n  return ref;\r\n}\r\n\r\n// Adapter for react-window\r\nconst ListboxComponent = forwardRef(function ListboxComponent(props, ref) {\r\n  const { children, ...other } = props;\r\n  const itemData = [];\r\n  children.forEach((item) => {\r\n    itemData.push(item);\r\n    itemData.push(...(item.children || []));\r\n  });\r\n\r\n  const theme = useTheme();\r\n  const smUp = useMediaQuery(theme.breakpoints.up(\"sm\"), {\r\n    noSsr: true,\r\n  });\r\n\r\n  const itemCount = itemData.length;\r\n  const itemSize = smUp ? 36 : 48;\r\n\r\n  const getChildSize = (child) => {\r\n    if (child.hasOwnProperty(\"group\")) {\r\n      return 48;\r\n    }\r\n\r\n    return itemSize;\r\n  };\r\n\r\n  const getHeight = () => {\r\n    if (itemCount > 8) {\r\n      return 8 * itemSize;\r\n    }\r\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\r\n  };\r\n\r\n  const gridRef = useResetCache(itemCount);\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <OuterElementContext.Provider value={other}>\r\n        <VariableSizeList\r\n          itemData={itemData}\r\n          height={getHeight() + 2 * LISTBOX_PADDING}\r\n          width=\"100%\"\r\n          ref={gridRef}\r\n          outerElementType={OuterElementType}\r\n          innerElementType=\"ul\"\r\n          itemSize={(index) => getChildSize(itemData[index])}\r\n          overscanCount={5}\r\n          itemCount={itemCount}\r\n        >\r\n          {renderRow}\r\n        </VariableSizeList>\r\n      </OuterElementContext.Provider>\r\n    </div>\r\n  );\r\n});\r\n\r\nListboxComponent.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nconst StyledPopper = styled(Popper)({\r\n  [`& .${autocompleteClasses.listbox}`]: {\r\n    boxSizing: \"border-box\",\r\n    \"& ul\": {\r\n      padding: 0,\r\n      margin: 0,\r\n    },\r\n  },\r\n});\r\n\r\nexport function AutocompleteVirtualization({\r\n  loading,\r\n  id,\r\n  label,\r\n  options,\r\n  setValue,\r\n  setOpen,\r\n  transitions,\r\n}) {\r\n  return (\r\n    <>\r\n      {transitions ? (\r\n        <Grow in={true} timeout={1500}>\r\n          <Autocomplete\r\n            id={id}\r\n            multiple\r\n            disableListWrap\r\n            PopperComponent={StyledPopper}\r\n            ListboxComponent={ListboxComponent}\r\n            options={options}\r\n            loading={loading}\r\n            groupBy={(option) => option[0].toUpperCase()}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                variant=\"filled\"\r\n                label={label}\r\n                placeholder={\r\n                  options && options.length > 0\r\n                    ? options[0] + \"、\" + options[1] + \" etc. \"\r\n                    : undefined\r\n                }\r\n              />\r\n            )}\r\n            renderOption={(props, option) => [props, option]}\r\n            renderGroup={(params) => params}\r\n            onChange={(e, value) => {\r\n              if (setValue) {\r\n                setValue(value);\r\n              }\r\n            }}\r\n            onOpen={(e) => {\r\n              if (setOpen) {\r\n                setOpen(true);\r\n              }\r\n            }}\r\n            onClose={() => {\r\n              if (setOpen) {\r\n                setOpen(false);\r\n              }\r\n            }}\r\n          />\r\n        </Grow>\r\n      ) : (\r\n        <Autocomplete\r\n          id={id}\r\n          multiple\r\n          disableListWrap\r\n          PopperComponent={StyledPopper}\r\n          ListboxComponent={ListboxComponent}\r\n          options={options}\r\n          loading={loading}\r\n          groupBy={(option) => option[0].toUpperCase()}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              variant=\"filled\"\r\n              label={label}\r\n              placeholder={\r\n                options && options.length > 0\r\n                  ? options[0] + \"、\" + options[1] + \" etc. \"\r\n                  : undefined\r\n              }\r\n            />\r\n          )}\r\n          renderOption={(props, option) => [props, option]}\r\n          renderGroup={(params) => params}\r\n          onChange={(e, value) => {\r\n            setValue(value);\r\n          }}\r\n          onOpen={(e) => {\r\n            setOpen(true);\r\n          }}\r\n          onClose={() => {\r\n            setOpen(false);\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { AutocompleteVirtualization } from \"../../../../../../components/AutocompleteVirtualization\";\r\n\r\nexport function SFTCustomerAutocomplete({ loading, options, setValue }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 300);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AutocompleteVirtualization\r\n        id=\"customer\"\r\n        loading={loading}\r\n        label=\"客戶名稱\"\r\n        options={options}\r\n        setValue={handleChange}\r\n        transitions={true}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nexport function SFTQuantitySearch({ loading, setValue }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(parseInt(value));\r\n    }, 200);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grow in={true} timeout={1500}>\r\n        <TextField\r\n          type=\"number\"\r\n          id=\"quantity\"\r\n          label=\"數量\"\r\n          variant=\"filled\"\r\n          disabled={loading}\r\n          onChange={(e) => handleChange(e.target.value)}\r\n        />\r\n      </Grow>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { AutocompleteVirtualization } from \"../../../../../../components/AutocompleteVirtualization\";\r\n\r\nexport function SFTUnitAutocomplete({ loading, options, setValue }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 100);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AutocompleteVirtualization\r\n        id=\"unit\"\r\n        loading={loading}\r\n        label=\"單位\"\r\n        options={options}\r\n        setValue={handleChange}\r\n        transitions={true}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { AutocompleteVirtualization } from \"../../../../../../components/AutocompleteVirtualization\";\r\n\r\nexport function SFTUserNameAutocomplete({ loading, options, setValue }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 100);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AutocompleteVirtualization\r\n        id=\"userName\"\r\n        loading={loading}\r\n        label=\"操作人員\"\r\n        options={options}\r\n        setValue={handleChange}\r\n        transitions={true}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nexport function SFTOrderIdSearch({ loading, setValue }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 400);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grow in={true} timeout={1500}>\r\n        <TextField\r\n          id=\"orderId\"\r\n          label=\"製令單號\"\r\n          variant=\"filled\"\r\n          disabled={loading}\r\n          onChange={(e) => handleChange(e.target.value)}\r\n        />\r\n      </Grow>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { AutocompleteVirtualization } from \"../../../../../../components/AutocompleteVirtualization\";\r\n\r\nexport function SFTItemNameAutocomplete({ loading, options, setValue }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 300);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AutocompleteVirtualization\r\n        id=\"itemName\"\r\n        loading={loading}\r\n        label=\"品名\"\r\n        options={options}\r\n        setValue={handleChange}\r\n        transitions={true}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nexport function SFTDisplayModeSelect({ setValue }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 0);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grow in={true} timeout={1500}>\r\n        <FormControl fullWidth variant=\"filled\">\r\n          <InputLabel id=\"displayModeLabel\">顯示模式</InputLabel>\r\n          <Select\r\n            labelId=\"displayModeLabel\"\r\n            id=\"displayMode\"\r\n            defaultValue={\"default\"}\r\n            label=\"工單狀態\"\r\n            onChange={(e) => {\r\n              handleChange(e.target.value);\r\n            }}\r\n          >\r\n            <MenuItem value={\"default\"}>預設</MenuItem>\r\n            <MenuItem value={\"online\"}>產線上</MenuItem>\r\n            <MenuItem value={\"intoStockIn\"}>待倉管入庫</MenuItem>\r\n            <MenuItem value={\"intoWH\"}>分批入庫</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grow>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { SFTCustomerAutocomplete } from \"./component/SFTCustomerAutocomplete\";\r\nimport { SFTQuantitySearch } from \"./component/SFTQuantitySearch\";\r\nimport { SFTUnitAutocomplete } from \"./component/SFTUnitAutocomplete\";\r\nimport { SFTUserNameAutocomplete } from \"./component/SFTUserNameAutocomplete\";\r\nimport { SFTOrderIdSearch } from \"./component/SFTOrderIdSearch\";\r\nimport { SFTItemNameAutocomplete } from \"./component/SFTItemNameAutocomplete\";\r\nimport { SFTDisplayModeSelect } from \"./component/SFTDisplayModeSelect\";\r\n\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Stack from \"@material-ui/core/Stack\";\r\n\r\nexport function SFTAside({\r\n  loading,\r\n  customerOptions,\r\n  unitOptions,\r\n  userNameOptions,\r\n  itemNameOptions,\r\n  setCustomerFilter,\r\n  setQuantityFilter,\r\n  setUnitFilter,\r\n  setUserNameFilter,\r\n  setItemNameFilter,\r\n  setOrderIdFilter,\r\n  displayMode,\r\n  setDisplayMode,\r\n}) {\r\n  return (\r\n    <>\r\n      <Box style={{ textAlign: \"center\" }}>\r\n        <Grid container justifyContent=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <label style={{ fontSize: 20 }}>篩選</label>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <label style={{ fontSize: 20 }}>&nbsp;</label>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Box style={{ marginTop: 15 }}>\r\n        <Stack spacing={2}>\r\n          <SFTDisplayModeSelect value={displayMode} setValue={setDisplayMode} />\r\n          <SFTCustomerAutocomplete\r\n            loading={loading}\r\n            options={customerOptions}\r\n            setValue={setCustomerFilter}\r\n          />\r\n          <SFTQuantitySearch loading={loading} setValue={setQuantityFilter} />\r\n          <SFTUnitAutocomplete\r\n            loading={loading}\r\n            options={unitOptions}\r\n            setValue={setUnitFilter}\r\n          />\r\n          <SFTUserNameAutocomplete\r\n            loading={loading}\r\n            options={userNameOptions}\r\n            setValue={setUserNameFilter}\r\n          />\r\n          <SFTItemNameAutocomplete\r\n            loading={loading}\r\n            options={itemNameOptions}\r\n            setValue={setItemNameFilter}\r\n          />\r\n          <SFTOrderIdSearch loading={loading} setValue={setOrderIdFilter} />\r\n        </Stack>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    paddingTop: 10,\r\n    borderRadius: 10,\r\n  },\r\n  contentText: {\r\n    fontSize: 16,\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nfunction getDisplayStatus(status) {\r\n  switch (status) {\r\n    case \"release\":\r\n      return \"待出站\";\r\n    case \"checkIn\":\r\n      return \"待出站\";\r\n    case \"checkOut\":\r\n      return \"待進站\";\r\n    case \"IntoStockIn\":\r\n      return \"待倉管入庫\";\r\n    case \"IntoWH\":\r\n      return \"入庫\";\r\n    default:\r\n      return status;\r\n  }\r\n}\r\n\r\nfunction getDisplayDatum(variant, datum) {\r\n  switch (variant) {\r\n    case \"detailed\":\r\n      if (datum) {\r\n        return {\r\n          customer: datum.customer,\r\n          proccesseName: datum.proccesseName,\r\n          quantity: datum.unit\r\n            ? datum.quantity + \" \" + datum.unit\r\n            : datum.quantity,\r\n          status: getDisplayStatus(datum.status),\r\n          name: datum.userName,\r\n          itemName: datum.itemName,\r\n          orderId: datum.orderId,\r\n        };\r\n      }\r\n      break;\r\n    default:\r\n      if (datum) {\r\n        return {\r\n          customer: datum.customer,\r\n          quantity: datum.unit\r\n            ? datum.quantity + \" \" + datum.unit\r\n            : datum.quantity,\r\n          status: getDisplayStatus(datum.status),\r\n          name: datum.userName,\r\n          itemName: datum.itemName,\r\n          orderId: datum.orderId,\r\n        };\r\n      }\r\n      break;\r\n  }\r\n}\r\n\r\nexport function MakeOrderCard({ color, variant, datum }) {\r\n  const classes = useStyles();\r\n\r\n  let displayDatum = getDisplayDatum(variant, datum);\r\n\r\n  return (\r\n    <Grow in={true} timeout={1500}>\r\n      <Card className={classes.container} raised={true}>\r\n        <CardContent>\r\n          {displayDatum\r\n            ? Object.values(displayDatum).map((value, index) => {\r\n                if (value) {\r\n                  return (\r\n                    <Typography\r\n                      className={classes.contentText}\r\n                      key={index}\r\n                      style={{ color: color }}\r\n                    >\r\n                      {value}\r\n                    </Typography>\r\n                  );\r\n                }\r\n              })\r\n            : null}\r\n        </CardContent>\r\n      </Card>\r\n    </Grow>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Skeleton from \"@material-ui/core/Skeleton\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    paddingTop: 10,\r\n    borderRadius: 10,\r\n  },\r\n  contentText: {\r\n    fontSize: 16,\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nexport function MakeOrderCardSkeletion({ variant }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grow in={true} timeout={1500}>\r\n      <Card className={classes.container} raised={true}>\r\n        <CardContent>\r\n          {variant === \"detailed\" ? (\r\n            <>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"100%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"35%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"20%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"15%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"20%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"100%\" />\r\n                <Skeleton animation=\"wave\" width=\"25%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"70%\" />\r\n              </Typography>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"100%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"35%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"20%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"20%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"100%\" />\r\n                <Skeleton animation=\"wave\" width=\"25%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"70%\" />\r\n              </Typography>\r\n            </>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n     </Grow>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { MakeOrderCard } from \"./component/MakeOrderCard\";\r\nimport { MakeOrderCardSkeletion } from \"./component/MakeOrderCardSkeletion\";\r\n\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Stack from \"@material-ui/core/Stack\";\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * max);\r\n}\r\n\r\nfunction getDisplayData(data) {\r\n  return data.slice(0, 100);\r\n}\r\n\r\nexport function SFTMakeOrderList({ datum, loading }) {\r\n  let skeletonDataAmount = getRandomInt(10) + 1;\r\n  let displayData = getDisplayData(datum.data);\r\n\r\n  return (\r\n    <>\r\n      <Box style={{ textAlign: \"center\" }}>\r\n        <Stack spacing={0}>\r\n          <label style={{ fontSize: 20 }}>{datum.proccesseName}</label>\r\n          <label style={{ fontSize: 20 }}>{datum.data.length}</label>\r\n        </Stack>\r\n      </Box>\r\n      <Box style={{ marginTop: 15 }}>\r\n        <Stack spacing={2}>\r\n          {!loading\r\n            ? displayData.length > 0\r\n              ? displayData.map((value, index) => {\r\n                  return (\r\n                    <MakeOrderCard\r\n                      key={index}\r\n                      color={datum.color}\r\n                      datum={value}\r\n                      variant={\r\n                        datum.proccesseName === \"其他\" ? \"detailed\" : undefined\r\n                      }\r\n                    />\r\n                  );\r\n                })\r\n              : null\r\n            : [...Array(skeletonDataAmount)].map((value, index) => {\r\n                return (\r\n                  <MakeOrderCardSkeletion\r\n                    key={index}\r\n                    variant={\r\n                      datum.proccesseName === \"其他\" ? \"detailed\" : undefined\r\n                    }\r\n                  />\r\n                );\r\n              })}\r\n        </Stack>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport * as actions from \"../../../_redux/sft/SFTActions\";\r\n\r\nimport { SFTAside } from \"./sftAside/SFTAside\";\r\nimport { SFTMakeOrderList } from \"./sftMakeOrderList/SFTMakeOrderList\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nexport function SFTCard() {\r\n  const [customerFilter, setCustomerFilter] = useState([]);\r\n  const [quantityFilter, setQuantityFilter] = useState(undefined);\r\n  const [unitFilter, setUnitFilter] = useState([]);\r\n  const [userNameFilter, setUserNameFilter] = useState([]);\r\n  const [itemNameFilter, setItemNameFilter] = useState([]);\r\n  const [orderIdFilter, setOrderIdFilter] = useState(undefined);\r\n  const [displayMode, setDisplayMode] = useState(\"default\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    SFTData,\r\n    customerOptions,\r\n    unitOptions,\r\n    userNameOptions,\r\n    itemNameOptions,\r\n    filteredData,\r\n    classifiedData,\r\n    actionsLoading,\r\n  } = useSelector(\r\n    (state) => ({\r\n      SFTData: state.sft.SFTData,\r\n      customerOptions: state.sft.customerOptions,\r\n      unitOptions: state.sft.unitOptions,\r\n      userNameOptions: state.sft.userNameOptions,\r\n      itemNameOptions: state.sft.itemNameOptions,\r\n      filteredData: state.sft.filteredData,\r\n      classifiedData: state.sft.classifiedData,\r\n      actionsLoading: state.sft.actionsLoading,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  useEffect(() => {\r\n    if(!SFTData.length){\r\n      dispatch(actions.getAllStatusData());\r\n    }\r\n\r\n    setInterval(() => {\r\n      dispatch(actions.reloadAllStatusData());\r\n    }, 5 * 60 * 1000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (filteredData.length > 0) {\r\n      dispatch(\r\n        actions.getClassifiedData({\r\n          filteredData: filteredData,\r\n          displayMode: displayMode,\r\n        })\r\n      );\r\n    }\r\n  }, [filteredData, displayMode]);\r\n\r\n  useEffect(() => {\r\n    if (SFTData.length > 0) {\r\n      dispatch(\r\n        actions.getFilteredData({\r\n          rawData: SFTData,\r\n          customer: customerFilter,\r\n          quantity: quantityFilter,\r\n          unit: unitFilter,\r\n          userName: userNameFilter,\r\n          orderId: orderIdFilter,\r\n        })\r\n      );\r\n      dispatch(actions.getCustomerOptions({ rawData: SFTData }));\r\n      dispatch(actions.getUnitOptions({ rawData: SFTData }));\r\n      dispatch(actions.getUserNameOptions({ rawData: SFTData }));\r\n      dispatch(actions.getItemNameOptions({ rawData: SFTData }));\r\n    }\r\n  }, [SFTData]);\r\n\r\n  useEffect(() => {\r\n    if (SFTData.length > 0) {\r\n      dispatch(\r\n        actions.getFilteredData({\r\n          rawData: SFTData,\r\n          displayMode: displayMode,\r\n          customer: customerFilter,\r\n          quantity: quantityFilter,\r\n          unit: unitFilter,\r\n          userName: userNameFilter,\r\n          itemName: itemNameFilter,\r\n          orderId: orderIdFilter,\r\n        })\r\n      );\r\n    }\r\n  }, [\r\n    displayMode,\r\n    customerFilter,\r\n    quantityFilter,\r\n    unitFilter,\r\n    userNameFilter,\r\n    orderIdFilter,\r\n    itemNameFilter,\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-start\"\r\n        spacing={2}\r\n      >\r\n        <Grid item xs={2}>\r\n          <SFTAside\r\n            loading={actionsLoading}\r\n            customerOptions={customerOptions}\r\n            unitOptions={unitOptions}\r\n            userNameOptions={userNameOptions}\r\n            itemNameOptions={itemNameOptions}\r\n            setCustomerFilter={setCustomerFilter}\r\n            setQuantityFilter={setQuantityFilter}\r\n            setUnitFilter={setUnitFilter}\r\n            setUserNameFilter={setUserNameFilter}\r\n            setItemNameFilter={setItemNameFilter}\r\n            setOrderIdFilter={setOrderIdFilter}\r\n            displayMode={displayMode}\r\n            setDisplayMode={setDisplayMode}\r\n          />\r\n        </Grid>\r\n        {classifiedData.length > 0\r\n          ? classifiedData.map((datum, index) => {\r\n              return (\r\n                <Grid item xs key={index}>\r\n                  <SFTMakeOrderList datum={datum} loading={actionsLoading} />\r\n                </Grid>\r\n              );\r\n            })\r\n          : null}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { AutocompleteVirtualization } from \"../../../../../../components/AutocompleteVirtualization\";\r\n\r\nexport function SFTCustomerAutocomplete({\r\n  loading,\r\n  options,\r\n  setValue,\r\n  setOpen,\r\n}) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 300);\r\n  };\r\n\r\n  const handleOpen = (value) => {\r\n    setOpen(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AutocompleteVirtualization\r\n        id=\"customer\"\r\n        loading={loading}\r\n        label=\"客戶名稱\"\r\n        options={options}\r\n        setValue={handleChange}\r\n        setOpen={handleOpen}\r\n        transitions={true}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nexport function SFTQuantitySearch({ loading, setValue, setFocus }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(parseInt(value));\r\n    }, 200);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grow in={true} timeout={1500}>\r\n        <TextField\r\n          type=\"number\"\r\n          id=\"quantity\"\r\n          label=\"數量\"\r\n          variant=\"filled\"\r\n          disabled={loading}\r\n          onChange={(e) => handleChange(e.target.value)}\r\n          onFocus={() => {\r\n            if (setFocus) {\r\n              setFocus(true);\r\n            }\r\n          }}\r\n          onBlur={() => {\r\n            if (setFocus) {\r\n              setFocus(false);\r\n            }\r\n          }}\r\n        />\r\n      </Grow>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { AutocompleteVirtualization } from \"../../../../../../components/AutocompleteVirtualization\";\r\n\r\nexport function SFTUnitAutocomplete({ loading, options, setValue,setOpen }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 100);\r\n  };\r\n\r\n  const handleOpen = (value) => {\r\n    setOpen(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AutocompleteVirtualization\r\n        id=\"unit\"\r\n        loading={loading}\r\n        label=\"單位\"\r\n        options={options}\r\n        setValue={handleChange}\r\n        setOpen={handleOpen}\r\n        transitions={true}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { AutocompleteVirtualization } from \"../../../../../../components/AutocompleteVirtualization\";\r\n\r\nexport function SFTUserNameAutocomplete({\r\n  loading,\r\n  options,\r\n  setValue,\r\n  setOpen,\r\n}) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 100);\r\n  };\r\n\r\n  const handleOpen = (value) => {\r\n    setOpen(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AutocompleteVirtualization\r\n        id=\"userName\"\r\n        loading={loading}\r\n        label=\"操作人員\"\r\n        options={options}\r\n        setValue={handleChange}\r\n        setOpen={handleOpen}\r\n        transitions={true}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { AutocompleteVirtualization } from \"../../../../../../components/AutocompleteVirtualization\";\r\n\r\nexport function SFTItemNameAutocomplete({\r\n  loading,\r\n  options,\r\n  setValue,\r\n  setOpen,\r\n}) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 300);\r\n  };\r\n\r\n  const handleOpen = (value) => {\r\n    setOpen(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AutocompleteVirtualization\r\n        id=\"itemName\"\r\n        loading={loading}\r\n        label=\"品名\"\r\n        options={options}\r\n        setValue={handleChange}\r\n        setOpen={handleOpen}\r\n        transitions={true}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nexport function SFTOrderIdSearch({ loading, setValue, setFocus }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 400);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grow in={true} timeout={1500}>\r\n        <TextField\r\n          id=\"orderId\"\r\n          label=\"製令單號\"\r\n          variant=\"filled\"\r\n          disabled={loading}\r\n          onChange={(e) => handleChange(e.target.value)}\r\n          onFocus={() => {\r\n            if (setFocus) {\r\n              setFocus(true);\r\n            }\r\n          }}\r\n          onBlur={() => {\r\n            if (setFocus) {\r\n              setFocus(false);\r\n            }\r\n          }}\r\n        />\r\n      </Grow>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nexport function SFTDisplayModeSelect({ setValue, setOpen }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 0);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grow in={true} timeout={1500}>\r\n        <FormControl fullWidth variant=\"filled\">\r\n          <InputLabel id=\"displayModeLabel\">顯示模式</InputLabel>\r\n          <Select\r\n            labelId=\"displayModeLabel\"\r\n            id=\"displayMode\"\r\n            defaultValue={\"default\"}\r\n            label=\"工單狀態\"\r\n            onChange={(e) => {\r\n              if (setValue) {\r\n                handleChange(e.target.value);\r\n              }\r\n            }}\r\n            onOpen={(e) => {\r\n              if (setOpen) {\r\n                setOpen(true);\r\n              }\r\n            }}\r\n            onClose={(e) => {\r\n              if (setOpen) {\r\n                setOpen(false);\r\n              }\r\n            }}\r\n          >\r\n            <MenuItem value={\"default\"}>預設</MenuItem>\r\n            <MenuItem value={\"online\"}>產線上</MenuItem>\r\n            <MenuItem value={\"intoStockIn\"}>待倉管入庫</MenuItem>\r\n            <MenuItem value={\"intoWH\"}>分批入庫</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grow>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nexport function SFTSearchModeSelect({ setValue, setOpen }) {\r\n  var timeoutId;\r\n  const handleChange = (value) => {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      setValue(value);\r\n    }, 0);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grow in={true} timeout={1500}>\r\n        <FormControl fullWidth variant=\"filled\">\r\n          <InputLabel id=\"searchModeLabel\">搜尋範圍</InputLabel>\r\n          <Select\r\n            labelId=\"searchModeLabel\"\r\n            id=\"searchMode\"\r\n            defaultValue={\"processing\"}\r\n            label=\"搜尋範圍\"\r\n            onChange={(e) => {\r\n              if (setValue) {\r\n                handleChange(e.target.value);\r\n              }\r\n            }}\r\n            onOpen={(e) => {\r\n              if (setOpen) {\r\n                setOpen(true);\r\n              }\r\n            }}\r\n            onClose={(e) => {\r\n              if (setOpen) {\r\n                setOpen(false);\r\n              }\r\n            }}\r\n          >\r\n            <MenuItem value={\"processing\"}>加工中</MenuItem>\r\n            <MenuItem value={\"finished\"}>入庫</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grow>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nexport function SFTShowResultButton({ disable, handleClick }) {\r\n  return (\r\n    <Grow in={true} timeout={1500}>\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        startIcon={<FilterListIcon />}\r\n        disabled={disable}\r\n        onClick={() => {\r\n          handleClick();\r\n        }}\r\n      >\r\n        顯示結果\r\n      </Button>\r\n    </Grow>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { SFTCustomerAutocomplete } from \"./component/SFTCustomerAutocomplete\";\r\nimport { SFTQuantitySearch } from \"./component/SFTQuantitySearch\";\r\nimport { SFTUnitAutocomplete } from \"./component/SFTUnitAutocomplete\";\r\nimport { SFTUserNameAutocomplete } from \"./component/SFTUserNameAutocomplete\";\r\nimport { SFTItemNameAutocomplete } from \"./component/SFTItemNameAutocomplete\";\r\nimport { SFTOrderIdSearch } from \"./component/SFTOrderIdSearch\";\r\nimport { SFTDisplayModeSelect } from \"./component/SFTDisplayModeSelect\";\r\nimport { SFTSearchModeSelect } from \"./component/SFTSearchModeSelect\";\r\nimport { SFTShowResultButton } from \"./component/SFTShowResultButton\";\r\n\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Stack from \"@material-ui/core/Stack\";\r\n\r\nexport function SFTAside({\r\n  loading,\r\n  customerOptions,\r\n  unitOptions,\r\n  userNameOptions,\r\n  itemNameOptions,\r\n  setCustomerFilter,\r\n  setQuantityFilter,\r\n  setUnitFilter,\r\n  setUserNameFilter,\r\n  setItemNameFilter,\r\n  setOrderIdFilter,\r\n  displayMode,\r\n  setDisplayMode,\r\n  searchMode,\r\n  setSearchMode,\r\n  disableResultButton,\r\n  showResult,\r\n  setCarouselTouch,\r\n}) {\r\n  const handleOpen = (value) => {\r\n    if (value) {\r\n      setCarouselTouch(false);\r\n    } else {\r\n      setCarouselTouch(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box style={{ minHeight: \"calc(100vh - 56px - 56px - 32px)\" }}>\r\n        <Box\r\n          style={{\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12}>\r\n              <label style={{ fontSize: 20 }}>篩選</label>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <label style={{ fontSize: 20 }}>&nbsp;</label>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n        <Box style={{ marginTop: 15 }}>\r\n          <Stack spacing={2}>\r\n            <SFTDisplayModeSelect\r\n              value={displayMode}\r\n              setValue={setDisplayMode}\r\n              setOpen={handleOpen}\r\n            />\r\n            <SFTCustomerAutocomplete\r\n              loading={loading}\r\n              options={customerOptions}\r\n              setValue={setCustomerFilter}\r\n              setOpen={handleOpen}\r\n            />\r\n            <SFTQuantitySearch\r\n              loading={loading}\r\n              setValue={setQuantityFilter}\r\n              setFocus={handleOpen}\r\n            />\r\n            <SFTUnitAutocomplete\r\n              loading={loading}\r\n              options={unitOptions}\r\n              setValue={setUnitFilter}\r\n              setOpen={handleOpen}\r\n            />\r\n            <SFTUserNameAutocomplete\r\n              loading={loading}\r\n              options={userNameOptions}\r\n              setValue={setUserNameFilter}\r\n              setOpen={handleOpen}\r\n            />\r\n            <SFTItemNameAutocomplete\r\n              loading={loading}\r\n              options={itemNameOptions}\r\n              setValue={setItemNameFilter}\r\n              setOpen={handleOpen}\r\n            />\r\n            <SFTOrderIdSearch\r\n              loading={loading}\r\n              setValue={setOrderIdFilter}\r\n              setFocus={handleOpen}\r\n            />\r\n            <SFTSearchModeSelect\r\n              value={searchMode}\r\n              setValue={setSearchMode}\r\n              setOpen={handleOpen}\r\n            />\r\n            <SFTShowResultButton\r\n              disable={disableResultButton}\r\n              handleClick={showResult}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    paddingTop: 10,\r\n    borderRadius: 10,\r\n  },\r\n  contentText: {\r\n    fontSize: 16,\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nfunction getDisplayStatus(status) {\r\n  switch (status) {\r\n    case \"release\":\r\n      return \"待出站\";\r\n    case \"checkIn\":\r\n      return \"待出站\";\r\n    case \"checkOut\":\r\n      return \"待進站\";\r\n    case \"IntoStockIn\":\r\n      return \"待倉管入庫\";\r\n    case \"IntoWH\":\r\n      return \"入庫\";\r\n    default:\r\n      return status;\r\n  }\r\n}\r\n\r\nfunction getDisplayDatum(variant, datum) {\r\n  switch (variant) {\r\n    case \"detailed\":\r\n      if (datum) {\r\n        return {\r\n          customer: datum.customer,\r\n          proccesseName: datum.proccesseName,\r\n          quantity: datum.unit\r\n            ? datum.quantity + \" \" + datum.unit\r\n            : datum.quantity,\r\n          status: getDisplayStatus(datum.status),\r\n          name: datum.userName,\r\n          itemName: datum.itemName,\r\n          orderId: datum.orderId,\r\n        };\r\n      }\r\n      break;\r\n    default:\r\n      if (datum) {\r\n        return {\r\n          customer: datum.customer,\r\n          quantity: datum.unit\r\n            ? datum.quantity + \" \" + datum.unit\r\n            : datum.quantity,\r\n          status: getDisplayStatus(datum.status),\r\n          name: datum.userName,\r\n          itemName: datum.itemName,\r\n          orderId: datum.orderId,\r\n        };\r\n      }\r\n      break;\r\n  }\r\n}\r\n\r\nexport function MakeOrderCard({ color, variant, datum }) {\r\n  const classes = useStyles();\r\n\r\n  let displayDatum = getDisplayDatum(variant, datum);\r\n\r\n  return (\r\n    <Grow in={true} timeout={1500}>\r\n      <Card className={classes.container} raised={true}>\r\n        <CardContent>\r\n          {displayDatum\r\n            ? Object.values(displayDatum).map((value, index) => {\r\n                if (value) {\r\n                  return (\r\n                    <Typography\r\n                      className={classes.contentText}\r\n                      key={index}\r\n                      style={{ color: color }}\r\n                    >\r\n                      {value}\r\n                    </Typography>\r\n                  );\r\n                }\r\n              })\r\n            : null}\r\n        </CardContent>\r\n      </Card>\r\n    </Grow>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Skeleton from \"@material-ui/core/Skeleton\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    paddingTop: 10,\r\n    borderRadius: 10,\r\n  },\r\n  contentText: {\r\n    fontSize: 16,\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nexport function MakeOrderCardSkeletion({ variant }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grow in={true} timeout={1500}>\r\n      <Card className={classes.container} raised={true}>\r\n        <CardContent>\r\n          {variant === \"detailed\" ? (\r\n            <>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"100%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"35%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"20%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"15%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"20%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"70%\" />\r\n              </Typography>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"100%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"35%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"20%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"20%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"100%\" />\r\n                <Skeleton animation=\"wave\" width=\"25%\" />\r\n              </Typography>\r\n              <Typography className={classes.contentText}>\r\n                <Skeleton animation=\"wave\" width=\"70%\" />\r\n              </Typography>\r\n            </>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </Grow>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { MakeOrderCard } from \"./component/MakeOrderCard\";\r\nimport { MakeOrderCardSkeletion } from \"./component/MakeOrderCardSkeletion\";\r\n\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Stack from \"@material-ui/core/Stack\";\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * max);\r\n}\r\n\r\nfunction getDisplayData(data) {\r\n  return data.slice(0,30);\r\n}\r\n\r\nexport function SFTMakeOrderList({ datum, loading }) {\r\n  let skeletonDataAmount = getRandomInt(10) + 1;\r\n  let displayData = getDisplayData(datum.data);\r\n\r\n  return (\r\n    <>\r\n      <Box style={{ minHeight: \"calc(100vh - 56px - 56px - 32px)\" }}>\r\n        <Box style={{ textAlign: \"center\" }}>\r\n          <Stack spacing={0}>\r\n            <label style={{ fontSize: 20 }}>{datum.proccesseName}</label>\r\n            <label style={{ fontSize: 20 }}>{datum.data.length}</label>\r\n          </Stack>\r\n        </Box>\r\n        <Box style={{ marginTop: 15 }}>\r\n          <Stack spacing={2}>\r\n            {!loading\r\n              ? displayData.length > 0\r\n                ? displayData.map((value, index) => {\r\n                    return (\r\n                      <MakeOrderCard\r\n                        key={index}\r\n                        color={datum.color}\r\n                        datum={value}\r\n                        variant={\r\n                          datum.proccesseName === \"其他\"\r\n                            ? \"detailed\"\r\n                            : undefined\r\n                        }\r\n                      />\r\n                    );\r\n                  })\r\n                : null\r\n              : [...Array(skeletonDataAmount)].map((value, index) => {\r\n                  return <MakeOrderCardSkeletion key={index} />;\r\n                })}\r\n          </Stack>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport * as actions from \"../../../_redux/sft/SFTActions\";\r\n\r\nimport { SFTAside } from \"./sftAside/SFTAside\";\r\nimport { SFTMakeOrderList } from \"./sftMakeOrderList/SFTMakeOrderList\";\r\n\r\nimport Slider from \"react-slick\";\r\n\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nexport function SFTMobileCard({ setOpen }) {\r\n  const [carouselTouch, setCarouselTouch] = useState(true);\r\n  const [customerFilter, setCustomerFilter] = useState([]);\r\n  const [quantityFilter, setQuantityFilter] = useState(undefined);\r\n  const [unitFilter, setUnitFilter] = useState([]);\r\n  const [userNameFilter, setUserNameFilter] = useState([]);\r\n  const [itemNameFilter, setItemNameFilter] = useState([]);\r\n  const [orderIdFilter, setOrderIdFilter] = useState(undefined);\r\n  const [displayMode, setDisplayMode] = useState(\"default\");\r\n  const [searchMode, setSearchMode] = useState(\"processing\");\r\n\r\n  const sliderRef = useRef();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSelect = (selectedIndex, e) => {\r\n    dispatch(actions.setCarouselIndex(selectedIndex));\r\n  };\r\n\r\n  const showResult = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const goToAside = () => {\r\n    if (sliderRef.current) {\r\n      sliderRef.current.slickGoTo(0);\r\n    }\r\n  };\r\n\r\n  const {\r\n    SFTData,\r\n    customerOptions,\r\n    unitOptions,\r\n    userNameOptions,\r\n    itemNameOptions,\r\n    classifiedData,\r\n    actionsLoading,\r\n  } = useSelector(\r\n    (state) => ({\r\n      SFTData: state.sft.SFTData,\r\n      customerOptions: state.sft.customerOptions,\r\n      unitOptions: state.sft.unitOptions,\r\n      userNameOptions: state.sft.userNameOptions,\r\n      itemNameOptions: state.sft.itemNameOptions,\r\n      classifiedData: state.sft.classifiedData,\r\n      actionsLoading: state.sft.actionsLoading,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(actions.getAllStatusData());\r\n    setInterval(() => {\r\n      dispatch(actions.reloadAllStatusData());\r\n    }, 5 * 60 * 1000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (SFTData.length > 0) {\r\n      dispatch(\r\n        actions.getClassifiedData({\r\n          filteredData: SFTData,\r\n          displayMode: displayMode,\r\n        })\r\n      );\r\n    }\r\n  }, [SFTData, displayMode]);\r\n\r\n  useEffect(() => {\r\n    if (SFTData.length > 0) {\r\n      dispatch(actions.getCustomerOptions({ rawData: SFTData }));\r\n      dispatch(actions.getUnitOptions({ rawData: SFTData }));\r\n      dispatch(actions.getUserNameOptions({ rawData: SFTData }));\r\n    }\r\n  }, [SFTData]);\r\n\r\n  useEffect(() => {\r\n    if (SFTData.length > 0) {\r\n      dispatch(\r\n        actions.getFilteredData({\r\n          rawData: SFTData,\r\n          displayMode: displayMode,\r\n          customer: customerFilter,\r\n          quantity: quantityFilter,\r\n          unit: unitFilter,\r\n          userName: userNameFilter,\r\n          itemName: itemNameFilter,\r\n          orderId: orderIdFilter,\r\n          searchMode: searchMode,\r\n        })\r\n      );\r\n    }\r\n  }, [\r\n    displayMode,\r\n    customerFilter,\r\n    quantityFilter,\r\n    unitFilter,\r\n    userNameFilter,\r\n    itemNameFilter,\r\n    orderIdFilter,\r\n    searchMode,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    dispatch(actions.setGoToAside(goToAside));\r\n  }, [sliderRef]);\r\n\r\n  const settings = {\r\n    dots: false,\r\n    infinite: true,\r\n    adaptiveHeight: true,\r\n    arrows: false,\r\n    touchMove: carouselTouch,\r\n    speed: 500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Slider ref={sliderRef} {...settings}>\r\n        <Box key={0} sx={{ px: 1 }}>\r\n          <SFTAside\r\n            loading={actionsLoading}\r\n            customerOptions={customerOptions}\r\n            unitOptions={unitOptions}\r\n            userNameOptions={userNameOptions}\r\n            itemNameOptions={itemNameOptions}\r\n            setCustomerFilter={setCustomerFilter}\r\n            setQuantityFilter={setQuantityFilter}\r\n            setUnitFilter={setUnitFilter}\r\n            setUserNameFilter={setUserNameFilter}\r\n            setOrderIdFilter={setOrderIdFilter}\r\n            setItemNameFilter={setItemNameFilter}\r\n            displayMode={displayMode}\r\n            setDisplayMode={setDisplayMode}\r\n            searchMode={searchMode}\r\n            setSearchMode={setSearchMode}\r\n            disableResultButton={\r\n              !(\r\n                customerFilter.length > 0 ||\r\n                quantityFilter ||\r\n                unitFilter.length > 0 ||\r\n                userNameFilter.length > 0 ||\r\n                itemNameFilter.length > 0 ||\r\n                orderIdFilter\r\n              )\r\n            }\r\n            showResult={showResult}\r\n            setCarouselTouch={setCarouselTouch}\r\n          />\r\n        </Box>\r\n        {classifiedData.length > 0\r\n          ? classifiedData.map((datum, index) => {\r\n              return (\r\n                <Box key={index + 1} sx={{ px: 1 }}>\r\n                  <SFTMakeOrderList datum={datum} loading={actionsLoading} />\r\n                </Box>\r\n              );\r\n            })\r\n          : null}\r\n      </Slider>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\n\r\nimport { MakeOrderCard } from \"../sftMakeOrderList/component/MakeOrderCard\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Stack from \"@material-ui/core/Stack\";\r\n\r\nfunction getColorByProccesseNameAndStatus({ datum }) {\r\n  if (datum.status === \"checkOut\") {\r\n    return ifStatusOfCheckOut(datum);\r\n  } else if (\r\n    datum.status === \"checkIn\" ||\r\n    datum.status === \"IntoStockIn\" ||\r\n    datum.status === \"IntoWH\" ||\r\n    datum.status === \"release\"\r\n  ) {\r\n    return ifStatusOfCheckIn(datum);\r\n  }\r\n\r\n  function ifStatusOfCheckOut(datum) {\r\n    let isPunchType = datum.itemName.search(\"沖型\");\r\n    switch (datum.proccesseName) {\r\n      case \"包裝\":\r\n        return \"#80ffff\";\r\n      case \"背膠\":\r\n        if (isPunchType !== -1) {\r\n          return \"#efb5b9\";\r\n        } else {\r\n          return \"#f0e199\";\r\n        }\r\n      case \"裁切\":\r\n        return \"#efb5b9\";\r\n      case \"沖型\":\r\n        return \"#efb5b9\";\r\n      case \"FQC\":\r\n        return \"#9cffd0\";\r\n      case \"OQC\":\r\n        return \"#80ffff\";\r\n      case \"修邊\":\r\n        return \"#80ffff\";\r\n      case \"分裝\":\r\n        return \"#80ffff\";\r\n      case \"貼合\":\r\n        return \"#80ffff\";\r\n      default:\r\n        return \"#c280ff\";\r\n    }\r\n  }\r\n\r\n  function ifStatusOfCheckIn(datum) {\r\n    switch (datum.proccesseName) {\r\n      case \"背膠\":\r\n        return \"#eff\";\r\n      case \"沖型\":\r\n        return \"#f0e199\";\r\n      case \"裁切\":\r\n        return \"#f0e199\";\r\n      case \"FQC\":\r\n        return \"#efb5b9\";\r\n      case \"OQC\":\r\n        return \"#80ffff\";\r\n      case \"修邊\":\r\n        return \"#9cffd0\";\r\n      case \"包裝\":\r\n        return \"#f59a23\";\r\n      default:\r\n        return \"#c280ff\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction getDisplayProccesseByProccesseNameAndStatus({ datum }) {\r\n  if (datum.status === \"checkOut\") {\r\n    return ifStatusOfCheckOut(datum);\r\n  } else if (\r\n    datum.status === \"checkIn\" ||\r\n    datum.status === \"IntoStockIn\" ||\r\n    datum.status === \"IntoWH\" ||\r\n    datum.status === \"release\"\r\n  ) {\r\n    return ifStatusOfCheckIn(datum);\r\n  }\r\n\r\n  function ifStatusOfCheckOut(datum) {\r\n    let isPunchType = datum.itemName.search(\"沖型\");\r\n    switch (datum.proccesseName) {\r\n      case \"包裝\":\r\n        return \"入庫\";\r\n      case \"背膠\":\r\n        if (isPunchType !== -1) {\r\n          return \"沖型\"; //沖型\r\n        } else {\r\n          return \"裁切\";\r\n        }\r\n      case \"裁切\":\r\n        return \"QC\";\r\n      case \"沖型\":\r\n        return \"QC\";\r\n      case \"FQC\":\r\n        return \"修邊\";\r\n      case \"OQC\":\r\n        return \"入庫\";\r\n      case \"修邊\":\r\n        return \"入庫\";\r\n      case \"分裝\":\r\n        return \"入庫\";\r\n      case \"貼合\":\r\n        return \"入庫\";\r\n      default:\r\n        return \"其他\";\r\n    }\r\n  }\r\n\r\n  function ifStatusOfCheckIn(datum) {\r\n    switch (datum.proccesseName) {\r\n      case \"背膠\":\r\n        return \"背膠\";\r\n      case \"沖型\":\r\n        return \"沖型\";\r\n      case \"裁切\":\r\n        return \"裁切\";\r\n      case \"FQC\":\r\n        return \"QC\";\r\n      case \"OQC\":\r\n        return \"入庫\";\r\n      case \"修邊\":\r\n        return \"修邊\";\r\n      case \"包裝\":\r\n        return \"包裝\";\r\n      default:\r\n        return \"其他\";\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function SFTFilteredResultDialog({ open, setOpen }) {\r\n  const descriptionElementRef = useRef(null);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const { filteredData } = useSelector(\r\n    (state) => ({\r\n      filteredData: state.sft.filteredData,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      const { current: descriptionElement } = descriptionElementRef;\r\n      if (descriptionElement !== null) {\r\n        descriptionElement.focus();\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  let displayDataTemp = filteredData.slice(0, 30);\r\n\r\n  return (\r\n    <Dialog\r\n      fullWidth\r\n      open={open}\r\n      onClose={handleClose}\r\n      scroll={\"paper\"}\r\n      aria-labelledby=\"scroll-dialog-title\"\r\n      aria-describedby=\"scroll-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"scroll-dialog-title\">篩選結果</DialogTitle>\r\n      <DialogContent dividers={true}>\r\n        <DialogContentText\r\n          id=\"scroll-dialog-description\"\r\n          ref={descriptionElementRef}\r\n          tabIndex={-1}\r\n        >\r\n          <Stack spacing={2}>\r\n            {displayDataTemp.map((datum) => {\r\n              return (\r\n                <MakeOrderCard\r\n                  color={getColorByProccesseNameAndStatus({ datum: datum })}\r\n                  variant={\"displayProccesse\"}\r\n                  datum={datum}\r\n                  displayProccesse={getDisplayProccesseByProccesseNameAndStatus(\r\n                    { datum: datum }\r\n                  )}\r\n                />\r\n              );\r\n            })}\r\n          </Stack>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose}>關閉</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { SFTCard } from \"./webPages/SFTCard\";\r\nimport { SFTMobileCard } from \"./mobilePages/SFTMobileCard\";\r\nimport { SFTFilteredResultDialog } from \"./mobilePages/sftFilteredResultDialog/SFTFilteredResultDialog\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useWindowDimensions } from \"../../../../layout/_core/useWindowDimensions\";\r\nexport default function SFTPage() {\r\n  const [open, setOpen] = useState(false);\r\n  const { height, width } = useWindowDimensions();\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>T-Global 即時追蹤生產系統</title>\r\n      </Helmet>\r\n      {width > 576 ? (\r\n        <SFTCard />\r\n      ) : (\r\n        <>\r\n          <SFTMobileCard setOpen={setOpen} />\r\n          <SFTFilteredResultDialog open={open} setOpen={setOpen} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}